datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Student Related Info

model User {
  id               String             @id @default(cuid())
  name             String
  email            String             @unique
  contact          String
  verified         Boolean
  profileImage     String             @default("/default-user.png")
  role             Role
  professionalInfo ProfesstionalInfo?
  accounts         Account[]
  sessions         Session[]
  password         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model ProfesstionalInfo {
  id             String   @id @default(cuid())
  dateOfJoining  DateTime
  facaultyName   String
  designation    String
  departmentName String
  userId         String   @unique
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  Teacher
  HOD
}
