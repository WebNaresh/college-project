datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Student Related Info

model User {
  id                         String                       @id @default(cuid())
  name                       String
  email                      String                       @unique
  contact                    String
  verified                   Boolean
  profileImage               String                       @default("/default-user.png")
  role                       roleEnum
  professionalInfo           ProfesstionalInfo?
  accounts                   Account[]
  sessions                   Session[]
  password                   String
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  PerformanceEvalutationForm PerformanceEvalutationForm[]
}

model ProfesstionalInfo {
  id                         String                       @id @default(cuid())
  dateOfJoining              DateTime
  facaultyName               String
  designation                String
  departmentName             String
  userId                     String                       @unique
  User                       User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  PerformanceEvalutationForm PerformanceEvalutationForm[]
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
}

model PerformanceEvalutationForm {
  id                  String                @id @default(cuid())
  userId              String
  // modeling of inbuilt objects
  teachingAndLearning TeachingAndLearning[]
  feedbackDetails     FeedbackDetails[]
  efforts             Efforts[]
  isSubmitted         Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  User                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProfesstionalInfo   ProfesstionalInfo?    @relation(fields: [professtionalInfoId], references: [id])
  professtionalInfoId String?
}

model TeachingAndLearning {
  id                   String                     @id @default(cuid())
  formId               String
  subjectName          String
  level                levelEnum
  courseHead           courseHeadEnum
  noOfHrsWeek          Int
  noOfClassesConducted Int
  result               Int
  term                 termEnum
  year                 yearEnum
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  Form                 PerformanceEvalutationForm @relation(fields: [formId], references: [id])
}

model FeedbackDetails {
  id                                     String                     @id @default(cuid())
  formId                                 String                     @unique
  term_I_current_year_student_feedback   Int                        @default(0)
  term_II_previous_year_student_feedback Int                        @default(0)
  term_I_current_year_peer_feedback      Int                        @default(0)
  term_II_previous_year_peer_feedback    Int                        @default(0)
  createdAt                              DateTime                   @default(now())
  updatedAt                              DateTime                   @updatedAt
  Form                                   PerformanceEvalutationForm @relation(fields: [formId], references: [id])
}

model Efforts {
  id      String @id @default(cuid())
  formId  String @unique
  efforts String

  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt
  Form      PerformanceEvalutationForm @relation(fields: [formId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum roleEnum {
  Teacher
  HOD
}

enum levelEnum {
  UG
  PG
}

enum courseHeadEnum {
  TH
  PR
  T
}

enum termEnum {
  I
  II
}

enum yearEnum {
  Current
  Previous
}
